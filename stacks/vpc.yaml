AWSTemplateFormatVersion: 2010-09-09
Description: vpc setting template stack
Parameters:
  AppName:
    Type: String
    Description: Name of the application.
    MinLength: '1'
    MaxLength: '80'
    AllowedPattern: '[A-Za-z0-9-]+'
    ConstraintDescription: >-
      Malformed input parameter. AppName must only contain upper and lower case
      letters, numbers, and -.
Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.0.0.0/22
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Vpc'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 192.0.0.0/25
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-PrivateSubnet1'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 192.0.0.128/25
      AvailabilityZone: !Sub '${AWS::Region}c'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-PrivateSubnet2'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 192.0.1.0/25
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-PublicSubnet1'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 192.0.1.128/25
      AvailabilityZone: !Sub '${AWS::Region}c'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-PublicSubnet2'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  Igw:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Igw'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  VPCGwAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc
  DefaultSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref Vpc
      GroupName: CommonInfraDefaultGroup
      GroupDescription: default group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Vpc-Sg'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  PrivateRt1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Private-Rt1'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  PrivateRt2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Private-Rt2'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  PublicRt:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Public-Rt'
        - Key: ResourceType
          Value: !Sub '${AppName}'
    DependsOn:
      - VPCGwAttachment
  PrivateSubnet1AssociationWithRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRt1
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2AssociationWithRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRt2
      SubnetId: !Ref PrivateSubnet2
  PublicSubnet1AssociationWithRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRt
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2AssociationWithRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRt
      SubnetId: !Ref PublicSubnet2
  IgwRt:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRt
      GatewayId: !Ref Igw
  Eip1:
    Type: 'AWS::EC2::EIP'
    Properties: {}
  NatGw1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - Eip1
          - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Nat-Gw1'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  Eip2:
    Type: 'AWS::EC2::EIP'
    Properties: {}
  NatGw2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - Eip2
          - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-Nat-Gw2'
        - Key: ResourceType
          Value: !Sub '${AppName}'
  NatGwRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRt1
      NatGatewayId: !Ref NatGw1
  NatGwRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRt2
      NatGatewayId: !Ref NatGw2
Outputs:
  PrivateSubnet1Id:
    Description: PrivateSubnet1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub 'Export${AppName}PrivateSubnet1Id'
  PrivateSubnet2Id:
    Description: PrivateSubnet2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub 'Export${AppName}PrivateSubnet2Id'
  DefaultSgId:
    Description: DefaultSg
    Value: !Ref DefaultSg
    Export:
      Name: !Sub 'Export${AppName}DefaultSgId'
  VpcId:
    Description: Vpc
    Value: !Ref Vpc
    Export:
      Name: !Sub 'Export${AppName}VpcId'